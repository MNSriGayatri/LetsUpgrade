1. 0-1 Knapsack Problem:

public class knapSack {
    public static int knapsack(int[] weights,int[] values,int capacity){
        int n = weights.length;
        int[][]  dp = new int[n+1][capacity+1];
        for(int i = 0; i <= n; i++){
            for(int W = 0; W <= capacity; W++){
                if(i == 0 || W == 0){
                    dp[i][W] = 0;
                }
                else if(weights[i-1] <= W){
                    dp[i][W] = Math.max(values[i-1]+ dp[i-1][W - weights[i-1]],dp[i-1][W]);
                }
                else{
                    dp[i][W] = dp[i-1][W];
                }
            }
        }
        return dp[n][capacity];
    }
    public static void main(String[] args) {
        int[] weights = {2, 3, 4};
        int[] values = {3, 4, 5};
        int capacity = 5;
        System.out.println(knapsack(weights,values,capacity));
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

