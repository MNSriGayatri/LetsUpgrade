1.ArrayList Operation:

import java.util.*;
import java.util.Collections;

public class ArrayListOperation {
    public static void ListOperation(String s){
        List<Character> list = new ArrayList<>();
        char freq = ' ';
        for(int i = 0; i < s.length()-1;i=i+2){
            if(s.charAt(i) == 'i'){
                list.add(s.charAt(i+1));
            }
            else if(s.charAt(i) == 'f'){
                freq = s.charAt(i+1);
            }
        }
        if(list.contains(freq)){
            System.out.println(Collections.frequency(list,freq));
        }
        else{
            System.out.println("Not Present");
        };
    }
    public static void main(String[] args) {
        ListOperation("igieieikisfe");
        ListOperation("icipipff");

    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------     
2.Search in Sorted Matrix:

import java.util.Arrays;

public class SearchInMatrix {
    public static void main(String[] args) {
        int[][] matrix = {{ 3, 30, 38}, {36, 43, 60}, {40, 51, 69}};
        int x = 30;
        int r = matrix.length;
        int  c = matrix[0].length;
        int present = 0;
        int i = 0;
        int j = c-1;
        while(i < r && j >=0){
                if(matrix[i][j] == x){
                    present = 1;
                    break;
                }
                else if(matrix[i][j] < x){
                    i++;
                }
                else if(matrix[i][j] > x){
                    j--;
                }
        }
        System.out.println((present == 1)?"1":"0");
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Range Sum Query:

class NumMatrix {
    int[][] pfsum;
    public NumMatrix(int[][] matrix) {
        int r = matrix.length;
        int c = matrix[0].length;
        pfsum =  new int[r+1][c+1];
        for (int i = 1; i <= r; i++) {
            for (int j = 1; j <= c; j++) {
                pfsum[i][j] = pfsum[i][j-1] + pfsum[i-1][j]  +  matrix[i-1][j-1] - pfsum[i-1][j-1];
            }
        }
        
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return pfsum[row2+1][col2+1] - pfsum[row1+1 - 1][col2+1] - pfsum[row2+1][col1+1 - 1] + pfsum[row1+1 - 1][col1+1 - 1];        
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Number Of Submatrices that Sum to Target:

class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int r = matrix.length;
        int c = matrix[0].length;
        int[][] pfsum = new int[r+1][c+1];
        for(int i = 1; i < r +1; i++){
            for(int j = 1; j < c+1; j++){
                pfsum[i][j] = pfsum[i][j-1] + pfsum[i-1][j] - pfsum[i-1][j-1] + matrix[i-1][j-1];
            }
        }
        int result = 0;
        for(int x1 = 1; x1 < r+1; x1++){
            for(int y1 = 1; y1 < c+1; y1++){
                for(int x2 = x1; x2 < r+1; x2++){
                    for(int y2 = y1; y2 < c+1; y2++){
                        if(target == pfsum[x2][y2] - pfsum[x2][y1-1] - pfsum[x1-1][y2] + pfsum[x1-1][y1-1]){
                            result += 1;
                        }
                    }
                }
            }
        }

        return result;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



