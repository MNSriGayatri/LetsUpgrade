1. Bitonic Array:

public class BitonicArray {
    public static void main(String[] args) {
        int[] arr = {3,9,10,20,17,5,1};
        int target = 20;
        System.out.println(Bitonic(arr,target));
    }
    public static int Bitonic(int[] arr,int target){
        int l = 0;
        int r = arr.length-1;
        while(l <= r){
            int mid = (l+r)/2;
            if(arr[mid] == target){
                return mid;
            }
            else if(arr[mid] < target){
                l = mid +1;
            }
            else{
                r = mid-1;
            }
        }
        return -1;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Aggressive Cows:

public class AggressiveCows {
    public static void main(String[] args) {
                int[] noOfStalls = {1,2,4,8,9};
                int noOfCows = 3;
                System.out.println(AllocateCows(noOfStalls,noOfCows));
    }
    public static int AllocateCows(int[] noOfStalls, int noOfCows){
                int len = noOfStalls.length;
                int left = 1;
                int right = noOfStalls[len-1]-noOfStalls[0];
                int ans = 0;
                while(left <= right){
                    int mid = (left+right)/2;
                    if(check(noOfStalls,noOfCows,mid,len)){
                        ans = mid;
                        left = mid +1;
                    }
                    else{
                        right = mid -1;
                    }

                }
                return ans;

            }
            public static boolean check(int[] noOfStalls,int noOfCows,int mid,int len){
                int lastplacedcow = noOfStalls[0];
                int cows = 1;
                for(int p = 1 ; p < len ; p++) {
                    if (noOfStalls[p] - lastplacedcow >= mid) {
                        lastplacedcow = noOfStalls[p];
                        cows++;
                        if (cows == noOfCows) {
                            return true;
                        }

                    }
                }
                return false;
            }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Painter's Partition Problem:

public class PaintersPartitionProblem {
    public static void main(String[] args) {
        int noOfPainters = 10;
        int eachPaintersTiming = 1;
        int[] noOfWork = {1,8,11,3};
        System.out.println(painter(noOfPainters,eachPaintersTiming,noOfWork));


    }
    public static int painter(int noOfPainters,int eachPaintersTiming, int[] noOfWork){
        int len = noOfWork.length;
        for(int k = 0 ; k < len; k++){
            noOfWork[k] = noOfWork[k] * eachPaintersTiming;
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < len; i++){
            max = Math.max(max,noOfWork[i]);
        }
        int left = max;
        int sum = 0;
        for(int j = 0; j < len; j++){
            sum += noOfWork[j];
        }
        int right = sum;
        int ans = 0;
        while(left <= right){
            int mid = (left+right)/2;
            if(check(noOfWork,noOfPainters,mid,len)){
                ans = mid;
                right = mid -1;
            }
            else{
                left = mid +1;
            }

        }
        return ans;

    }
    public static boolean check(int[] noOfWork,int noOfPainters,int mid,int len){
        int workers = 1;
        int currwork = 0;
        for(int p = 0 ; p < len ; p++){
            if(currwork + noOfWork[p] <= mid ){
                currwork += noOfWork[p];
            }
            else{
                workers += 1;
                currwork = noOfWork[p];

            }
        }
        if(workers > noOfPainters){
            return false;
        }
        return true;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Allocate Books:

public class AllocateBooks {
    public static void main(String[] args) {
        int[] noOfPages = {5,17,100,11};
        int noOfStudents = 4;
        System.out.println(Allocate(noOfPages,noOfStudents));


    }
            public static int Allocate(int[] noOfPages, int noOfStudents){
                int len = noOfPages.length;
                int max = Integer.MIN_VALUE;
                for(int i = 0; i < len; i++){
                    max = Math.max(max,noOfPages[i]);
                }
                int left = max;
                int sum = 0;
                for(int j = 0; j < len; j++){
                    sum += noOfPages[j];
                }
                int right = sum;
                int ans = 0;
                while(left <= right){
                    int mid = (left+right)/2;
                    if(check(noOfPages,noOfStudents,mid,len)){
                        ans = mid;
                        right = mid -1;
                    }
                    else{
                        left = mid +1;
                    }

                }
                return ans;

            }
            public static boolean check(int[] noOfPages,int noOfStudents,int mid,int len){
                int students = 1;
                int currpages = 0;
                for(int p = 0 ; p < len ; p++){
                    if(currpages + noOfPages[p] <= mid ){
                        currpages += noOfPages[p];
                    }
                    else{
                        students += 1;
                        currpages = noOfPages[p];

                    }
                }
                if(students > noOfStudents){
                    return false;
                }
                return true;
            }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
