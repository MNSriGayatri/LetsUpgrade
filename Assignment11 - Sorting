1. Merge Sorted Array:

import java.util.*;
public class MergeSortedArray {
    public static void main(String[] args) {
        int[] nums1 = {1,2,3,0,0,0};
        int m = 3;
        int[] nums2 = {2,5,6};
        int n = 3;
        merge(nums1,m,nums2,n);
    }
        public static void merge(int[] nums1, int m, int[] nums2, int n) {
            int[] nums3 = new int[m+n];
            int p1 = 0;
            int p2 = 0;
            int p3 = 0;
            while(p1 < m && p2 < n){
                if(nums1[p1] <= nums2[p2]){
                    nums3[p3] = nums1[p1];
                    p3 = p3 + 1;
                    p1 = p1 + 1;
                }
                else{
                    nums3[p3] = nums2[p2];
                    p3 = p3 + 1;
                    p2 = p2 + 1;
                }
            }
            while(p1 < m){
                nums3[p3] = nums1[p1];
                p3 = p3 + 1;
                p1 = p1 + 1;
            }
            while(p2 < n){
                nums3[p3] = nums2[p2];
                p3 = p3 + 1;
                p2 = p2 + 1;
            }
            System.out.println(Arrays.toString(nums3));
        }

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Kth Smallest Element in the Array:

public class KthSmallestElement {
    public static void main(String[] args) {
        int[] arr =  {2, 1, 4, 3, 2};
        int k = 3;
        System.out.println(KthElement(arr,k));
    }
    public static int KthElement(int[] arr,int k){
        int len = arr.length;
        for(int i = 0; i <  len; i++){
            for(int j = i+1; j < len ; j++){
                if(arr[i] > arr[j]){
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        return arr[k-1];
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Consecutive Array Elements:

import java.util.*;
public class ConsecutiveArrayElements {
    public static void main(String[] args) {
        int n = 6;
        int[] arr = {2, 1, 0, -3, -1, -2};
        System.out.println(isConsecutive(arr,n));
    }
    public static String isConsecutive(int[] arr,int n){
        Arrays.sort(arr);
        for(int i = 1; i < n; i++){
            if(arr[i] - arr[i-1] != 1){
                return "No";
            }
        }
        return "Yes";
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Chocolate Distribution:

import java.util.*;
public class ChocolateDistribution {
    public static void main(String[] args) {
        int n = 7;
        int m = 3;
        int[] arr = {7, 3, 2, 4, 9, 12, 56}
                ;
        System.out.println(Distribution(arr,n,m));
    }
    public static int Distribution(int[] arr,int n,int m){
        Arrays.sort(arr);
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < n-m ; i++){
            min = Math.min(min,arr[m-1+i]-arr[i]);
        }
        return min;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Sort an Array:

class Solution {
    public int[] sortArray(int[] nums) {
        sort(nums,0,nums.length-1);
        return nums;
    }
    public static void merge(int[] nums,int start,int mid,int end){
        int[] temp = new int[end-start+1];
        int i = start;
        int j = mid+1;
        int k = 0;
        while(i <= mid && j <= end){
            if(nums[i] < nums[j]){
                temp[k] = nums[i];
                k++;
                i++;
            }
            else{
                temp[k] = nums[j];
                k++;
                j++;
            }
        }
        while(i <= mid){
            temp[k] = nums[i];
            k++;
            i++;
        }
        while(j <= end){
            temp[k] = nums[j];
            k++;
            j++;
        }
        int n = 0;
        for(int m = start; m <= end; m ++){
            nums[m] = temp[n++];
        }
    }
    public static void sort(int[] nums,int start,int end){
        if(start < end){
            int mid = (start+end)/2;
            sort(nums,start,mid);
            sort(nums,mid+1,end);
            merge(nums,start,mid,end);
        }

    }

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Sort Colors:

class Solution {
    public void sortColors(int[] nums) {
        int len = nums.length;
        for(int i = 0; i < len; i++){
            for(int j = i+1; j < len; j++){
                if(nums[i] > nums[j]){
                    int temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                }
            }
        }
        System.out.println(Arrays.toString(nums));  
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
