1. Binary Tree Inorder Traversal:

class Solution {
    List<Integer> list = new LinkedList();
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root == null){
            return new LinkedList();
        }
        inorderTraversal(root.left);
        list.add(root.val);
        inorderTraversal(root.right);
        return list;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
2. Binary Tree Level Order Traversal:

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList();
        Queue<TreeNode> queue = new LinkedList();
        if(root == null){
            return list;
        }
        queue.add(root);
        while(!queue.isEmpty()){
            int len = queue.size();
            List<Integer> arr = new ArrayList();
            for(int i = 0; i < len; i++){
                TreeNode node = queue.poll();
                arr.add(node.val);
                if(node.left != null){
                    queue.add(node.left);
                }
                if(node.right != null){
                    queue.add(node.right);
                }
            }
            list.add(arr);
        }
        return list;
        
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
3. Binary Tree Preorder Traversal:

class Solution {
    List<Integer> list = new LinkedList();
    public List<Integer> preorderTraversal(TreeNode root) {
        if(root == null){
            return new LinkedList();
        }
        list.add(root.val);
        preorderTraversal(root.left);
        preorderTraversal(root.right);
        return list;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
4. Binary Tree Postorder Traversal:

class Solution {
    List<Integer> list = new LinkedList();
    public List<Integer> postorderTraversal(TreeNode root) {
        if(root == null){
            return new LinkedList();
        }
        postorderTraversal(root.left);
        postorderTraversal(root.right);
        list.add(root.val);
        return list;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
5. Maximum Depth Of Binary Tree:

class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        int lh = maxDepth(root.left);
        int rh = maxDepth(root.right);
        return Math.max(lh,rh)+1;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
6. Symmetric Tree:

class Solution {
    public boolean sym(TreeNode t1,TreeNode t2){
        if(t1 == null && t2 == null){
            return true;
        }
        else if(t1 == null || t2 == null){
            return false;
        }
        return (t1.val == t2.val) && sym(t1.left,t2.right) && sym(t1.right,t2.left);
    }
    public boolean isSymmetric(TreeNode root) {
        return sym(root,root);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
7. Maximum Level Sum of a Binary Tree:

class Solution {
    public int maxLevelSum(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList();
        if(root == null){
            return 0;
        }
        queue.add(root);
        int leveltracker = 1;
        int level = 1;
        int tempsum = Integer.MIN_VALUE;
        while(!queue.isEmpty()){
            int sum = 0;
            int len = queue.size();
            for(int i = 0; i < len; i++){
                TreeNode node = queue.poll();
                sum += node.val;
                if(node.left != null){
                    queue.add(node.left);
                }
                if(node.right != null){
                    queue.add(node.right);
                }
            }
            if(sum > tempsum){
                tempsum = sum;
                level = leveltracker;
            }
            leveltracker++;
        }
        return level;
        
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
8. Sum Root To Leaf Numbers:

class Solution {
    int result=0;
    public void sum(TreeNode root, int num) {
        if(root == null) return;
        num = root.val + ( 10 * num);

        if(root.left == null && root.right == null){
            result += num;
        }
        sum(root.left, num);
        sum(root.right, num);
    }
    public int sumNumbers(TreeNode root) {
        sum(root, 0);
        return result;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
9. Vertical Order Traversal Of Binary Tree:

import java.util.*;

class Node {
        int val;
        Node left;
        Node right;

        Node() {
        }

        Node(int val) {
        this.val = val;
        this.left = null;
        this.right = null;
        }
}
class Pair {
    Node node;
    int dist;

    Pair(Node node, int dist) {
        this.node = node;
        this.dist = dist;
    }
}
public class VerticalLevelOrderTraversal {
    public static void main(String[] args) {
        Node head = new Node(1);
        Node n1 = new Node(2);
        Node n2 = new Node(3);
        Node n3 = new Node(4);
        Node n4 = new Node(5);
        head.left = n1;
        head.right = n2;
        n1.left = n3;
        n1.right = n4;
        vertical(head);
    }

    public static void vertical(Node root){
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root,0));
        while(!queue.isEmpty()){
            Pair front = queue.poll();
            Node n = front.node;
            int dist = front.dist;
            if(!map.containsKey(dist)){
                map.put(dist,new ArrayList<>());
            }
            map.get(dist).add(n.val);
            if(n.left != null){
                queue.add(new Pair(n.left,dist-1));
            }
            if(n.right != null){
                queue.add(new Pair(n.right,dist+1));
            }
        }
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        int minKey = Collections.min(map.keySet());
        int maxKey = Collections.max(map.keySet());
        for (int i = minKey; i <= maxKey; i++) {
            if (map.containsKey(i)) {
                result.add(new ArrayList<>(map.get(i)));
            }
        }

        System.out.println(result);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------
10. Binary Tree Right Side View:

class Solution {
    int levelTracker = 0;
    public void right(TreeNode root,int level,List<Integer> list){
        if(root == null){
            return;
        }
        if(levelTracker < level){
            list.add(root.val);
            levelTracker = level;
        }
        right(root.right,level+1,list);
        right(root.left,level+1,list);
    }
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        right(root,1,list);
        return list;
        
    }

}
-------------------------------------------------------------------------------------------------------------------------------------------------------
11. Left View Of Binary Tree:

class Solution {
    int levelTracker = 0;
    public void left(TreeNode root,int level,List<Integer> list){
        if(root == null){
            return;
        }
        if(levelTracker < level){
            list.add(root.val);
            levelTracker = level;
        }
        left(root.left,level+1,list);
	left(root.right,level+1,list);
    }
    public List<Integer> leftSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        left(root,1,list);
        return list;
        
    }

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
