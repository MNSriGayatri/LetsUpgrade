1. Rotten Oranges:

import java.util.*;

public class RottenOranges {
    public static void main(String[] args) {
        System.out.println(rottenOranges());
    }
    public static int rottenOranges(){
        int minutes = 0;
        int[][] oranges = {{0,1,2},{0,1,2},{2,1,1}};
        //int[][] oranges = {{2,2,0,1}};
        int r = oranges.length;
        int c = oranges[0].length;
        Queue<int[]> queue = new LinkedList<>();
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                if(oranges[i][j] == 2){
                    queue.offer(new int[]{i,j});
                }
            }
        }
        while(!queue.isEmpty()){
            int size = queue.size();
            int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
            for(int k = 0; k < size; k++ ){
                int[] current = queue.poll();
                for(int p = 0 ; p < directions.length; p++){
                    int new_r = current[0] + directions[p][0];
                    int new_c = current[1] + directions[p][1];
                    if(new_r >= 0 && new_r  < r && new_c >= 0 && new_c < c && oranges[new_r][new_c] == 1){
                        oranges[new_r][new_c] = 2;
                        queue.offer(new int[]{new_r,new_c});
                    };
                }
            }
            if(!queue.isEmpty()){
                minutes++;
            }
        }
        for(int[] row : oranges){
            for(int col : row){
                if(col == 1){
                    return -1;
                }
            }
        }
        return minutes;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. DFS of Graph:

import java.util.*;

public class DFSOfGraph {
    public static void main(String[] args) {
        List<List<Integer>> graph = new ArrayList<>();
        int vertex = 5;
        for(int i = 0 ; i < vertex; i++){
            graph.add(new ArrayList<>());
        }
        graph.get(0).add(2);
        graph.get(0).add(3);
        graph.get(0).add(1);
        graph.get(1).add(0);
        graph.get(2).add(0);
        graph.get(2).add(4);
        graph.get(3).add(0);
        graph.get(4).add(2);
        int len = graph.size();
        boolean[] visited  = new boolean[len];
        dfsGraph(graph,visited,len,0);
    }
    public static void dfsGraph(List<List<Integer>> graph,boolean[] visited,int len,int i){
            if(!visited[i]){
                visited[i] = true;
                System.out.print(i+" ");
                for(int j = 0; j < graph.get(i).size(); j++) {
                    int val = graph.get(i).get(j);
                    dfsGraph(graph, visited, len, val);
                }
            }
            else{
                return;
            }
    }

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
