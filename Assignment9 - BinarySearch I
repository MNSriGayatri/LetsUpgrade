1.Search Insert Position:

class Solution {
    public int searchInsert(int[] nums, int target) {
        int l = 0;
        int r = nums.length-1;
        while(l<=r){
            int mid = (l+r)/2;
            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] < target){
                l = mid+1;
            }
            else{
                r = mid-1;
            }
        }
        return l;
        
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Find Peak Element:

class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;
        if(n == 1){
            return 0;
        }
        int l = 1;
        int r = n-2;
        if(nums[0] > nums[1]){
            return 0;
        }
        else if(nums[n-1] > nums[n-2]){
            return n-1;
        }
        else{
            while(l <= r){
                int mid = (l+r)/2;
                if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1])
                {
                    return mid;
                }
                else if(nums[mid] > nums[mid-1]){
                    l = mid+1;
                }
                else{
                    r = mid-1;
                }
            }
        }
        return l;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Search in Rotated Sorted Array:

class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int l = 0;
        int r = n-1;
        while(l <= r){
            int mid = (l+r)/2;
            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] >= nums[l]){
                if(target >= nums[l] && target < nums[mid]){
                    r = mid - 1;
                }
                else{
                    l = mid + 1;
                }
            }
            else{
                if(target <= nums[r] && target > nums[mid]){
                    l = mid + 1;
                }
                else{
                    r = mid - 1;
                }
            }
        }
        return -1;
        
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Search a 2D Matrix:

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int r = matrix.length;
        int c = matrix[0].length;
        int l1 = 0;
        int r1 = r-1;
        int l2 = 0;
        int r2 = c-1;
         while (l1 <= r1) {
            int m1 = (l1 + r1) / 2;
            if (matrix[m1][r2] >= target) {
                if (isTargetPresent(m1, l2, r2, matrix, target)) {
                    return true;
                }
                else {
                    r1 = m1 - 1;
                }
            }
            else{
                l1 = m1+1;
            }
        }
        return false;
        
    }
    boolean isTargetPresent(int m1,int l2,int r2,int[][]matrix,int target)
    {
        while(l2<=r2){
            int m2 = (l2+r2)/2;
            if(matrix[m1][m2] == target){
                return true;
            }
            else if(matrix[m1][m2] < target){
                l2 = m2+1;
            }
            else{
                r2 = m2-1;
            }
        }
        return false;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Median Of Two Sorted Arrays:

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int len = n1+n2;
        int arr[] = new int[len];
        System.arraycopy(nums1,0,arr,0,n1);
        System.arraycopy(nums2,0,arr,n1,n2);
        Arrays.sort(arr);
        if(len % 2 == 0){
            return (double)(arr[len/2]+arr[len/2-1])/2.0;
        }
        else{
            return (double)(arr[len/2]);
        }

    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Matrix Median:

import java.util.Arrays;

public class MatrixMedian { 
        public static int sortMatrix(int[][] matrix) {
            int rows = matrix.length;
            int cols = matrix[0].length;

            int[] flatArray = new int[rows * cols];
            int index = 0;

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    flatArray[index++] = matrix[i][j];
                }
            }
            Arrays.sort(flatArray);
            return flatArray[flatArray.length/2];
        }
        public static void main(String[] args) {
            int[][] matrix1 = {{5,17,100}};
            System.out.println(sortMatrix(matrix1));
        }

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. Number Of Occurrence:

public class NumberOfOccurrences {
    public static void main(String[] args) {
        int[] arr = {1,1,2,2,2,2,3,3,3,3,3,3,3};
        int X = 3;
        int f = firstOccurrence(arr,X);
        int l = lastOccurrence(arr,X);
        System.out.println(l-f+1);

    }
    public static int firstOccurrence(int[] arr,int X) {
        int l = 0;
        int r = arr.length - 1;
        int ans = 0;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (arr[mid] == X) {
                ans = mid;
                r = mid - 1;
            } else if (arr[mid] < X) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
    public static int lastOccurrence(int[] arr,int X) {
        int l = 0;
        int r = arr.length - 1;
        int ans = 0;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (arr[mid] == X) {
                ans = mid;
                l = mid + 1;
            } else if (arr[mid] < X) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Floor in a Sorted Array:

public class FloorInASortedArray {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 6, 9, 10, 11, 14, 18};
        int K = 0;
        System.out.println(floorOfElement(arr, K));
    }
    public static int floorOfElement(int[] arr,int K){
            int l = 0;
            int r = arr.length-1;
            int ans = -1;
            while(l <= r){
                int mid = (l+r)/2;
                if(arr[mid] <= K){
                    ans = mid;
                    l = mid + 1;
                }
                else{
                    r = mid -1;
                }
            }
            return ans;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
