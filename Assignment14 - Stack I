1. Valid Parentheses:

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack();
        int len = s.length();
        for(int i = 0; i < len; i++){
            char c = s.charAt(i);
            int j = i;
            if(len == 0 || len == 1 ||  ((j == 0 || stack.isEmpty()) && (c == ')' || c == ']' || c == '}'))){
                return false;
            }
            else if( c == '(' || c == '[' || c == '{'){
                stack.push(c);
            }
            else if(c == ')' || c == ']' || c == '}'){
                char top = stack.peek();
                if(top ==  '('){
                    if(c == ')'){
                        stack.pop();
                    }
                    else{
                        return false;
                    }
                }
                else if(top == '['){
                    if(c == ']'){
                        stack.pop();
                    }
                    else{
                        return false;
                    }
                    
                }
                else if(top == '{'){
                    if(c == '}'){
                        stack.pop();
                    }
                    else{
                        return false;
                    }
                    
                }
                  
            }
        }
         return stack.isEmpty();
        
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Nearest Smaller Element:

import java.util.*;
public class NearestSmallerElement {
    public static void main(String[] args) {
        int[] arr = {4, 5, 2, 10, 8};
        NearestSmaller(arr);
    }
    public static void NearestSmaller(int[] arr){
        Stack<Integer> stack = new Stack();
        int len = arr.length;
        int[] nse = new int[len];
        for(int i  = 0; i < len; i++){
            while(!stack.isEmpty() && stack.peek() >= arr[i]){
                stack.pop();
            }
            if(stack.isEmpty()){
                nse[i] = -1;
            }
            else{
                nse[i] = stack.peek();
            }
            stack.push(arr[i]);
        }
        System.out.println(Arrays.toString(nse));

    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Largest Rectangle in Histogram:

class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
          Stack<Integer> stack1 = new Stack();
          int[] lse = new int[n];
          for(int i = 0; i < n; i++){
              while(!stack1.isEmpty() && heights[stack1.peek()] >= heights[i]){
                  stack1.pop();
              }
              if(!stack1.isEmpty()){
                  lse[i] = stack1.peek();
              }
              else{
                  lse[i] = -1;
              }
              stack1.push(i);
          }
          Stack<Integer> stack2 = new Stack();
            int[] rse = new int[n];
            for(int j = n-1; j >= 0; j--){
                while(!stack2.isEmpty() && heights[stack2.peek()] > heights[j]){
                    stack2.pop();
                }
                if(!stack2.isEmpty()){
                    rse[j] = stack2.peek();
                }
                else{
                    rse[j] = n;
                }
                stack2.push(j);
            }
        int area = Integer.MIN_VALUE;
        for(int k = 0; k < n; k++){
            int limit = rse[k] - lse[k] - 1;
            area = Math.max(area,limit*heights[k]);
        }
        return area;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Sum Of Subarray Minimum:

class Solution {
    public int sumSubarrayMins(int[] arr) {
         int n = arr.length;
          Stack<Integer> stack1 = new Stack();
          int[] lse = new int[n];
          for(int i = 0; i < n; i++){
              while(!stack1.isEmpty() && arr[stack1.peek()] >= arr[i]){
                  stack1.pop();
              }
              if(!stack1.isEmpty()){
                  lse[i] = stack1.peek();
              }
              else{
                  lse[i] = -1;
              }
              stack1.push(i);
          }
          Stack<Integer> stack2 = new Stack();
            int[] rse = new int[n];
            for(int j = n-1; j >= 0; j--){
                while(!stack2.isEmpty() && arr[stack2.peek()] > arr[j]){
                    stack2.pop();
                }
                if(!stack2.isEmpty()){
                    rse[j] = stack2.peek();
                }
                else{
                    rse[j] = n;
                }
                stack2.push(j);
            }
        long minSum = 0;
        long m = 1000000007;
        for(int k = 0; k < n; k++){
            long start = k - lse[k];
            long end = rse[k] - k;
            long noOfSubarrays = (start%m * end%m)%m;
            long result = (arr[k]%m * noOfSubarrays%m)%m;
            minSum = (minSum%m + result%m)%m;

        }
        return (int)minSum;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Next Greater Element:

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack();
        int len1 = nums1.length;
        int len2 = nums2.length;
        int[] nge = new int[len2];
        for(int i  = len2-1; i >= 0; i--){
            while(!stack.isEmpty() && stack.peek() <= nums2[i]){
                stack.pop();
            }
            if(stack.isEmpty()){
                nge[i] = -1;
            }
            else{
                nge[i] = stack.peek();
            }
            stack.push(nums2[i]);
        }
        int[] result = new int[len1];
        for(int j = 0; j < len1; j++){
            result[j] = nge[index(nums2,nums1[j])];
        }
        return result;

    }
    public static int index(int[] nums2,int val){
        for(int k = 0; k < nums2.length; k++){
            if(val == nums2[k]){
                return k;
            }
        }
        return -1;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Maximum Rectangle:

class Solution {
    public int maximalRectangle(char[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        int[][] mat = new int[row][col];
        int[] m  = new int[col];
        int max_area = Integer.MIN_VALUE;
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(matrix[i][j] == '1'){
                    m[j] += 1;
                }
                else{
                    m[j] = 0;
                }
            }
            max_area = Math.max(max_area, max_histogram(m));
        }
       
        return max_area;

    }



    public static int max_histogram(int[] m) {
            int n = m.length;
            Stack<Integer> stack1 = new Stack();
            int[] lse = new int[n];
            for(int i = 0; i < n; i++){
                while(!stack1.isEmpty() && m[stack1.peek()] >= m[i]){
                    stack1.pop();
                }
                if(!stack1.isEmpty()){
                    lse[i] = stack1.peek();
                }
                else{
                    lse[i] = -1;
                }
                stack1.push(i);
            }
            Stack<Integer> stack2 = new Stack();
            int[] rse = new int[n];
            for(int j = n-1; j >= 0; j--){
                while(!stack2.isEmpty() && m[stack2.peek()] >= m[j]){
                    stack2.pop();
                }
                if(!stack2.isEmpty()){
                    rse[j] = stack2.peek();
                }
                else{
                    rse[j] = n;
                }
                stack2.push(j);
            }
            System.out.println(Arrays.toString(lse));
            System.out.println(Arrays.toString(rse));
            int area = Integer.MIN_VALUE;
            for(int k = 0; k < n; k++){
                int limit = rse[k] - lse[k] - 1;
                area = Math.max(area,limit*m[k]);
            }
            return area;
    }

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. Sort A Stack:

import java.util.*;
public class SortAStack {
    public static void main(String[] args) {
        Stack<Integer> s = new Stack();
        s.push(41);
        s.push(3);
        s.push(32);
        s.push(2);
        s.push(11);
        sort(s);

    }
    public static void sort(Stack<Integer> s){
        Stack<Integer> result = new Stack();
        Stack<Integer> temp = new Stack();
        while(!s.isEmpty()){
            int topStackEle = s.pop();
            while(!result.isEmpty() && result.peek() > topStackEle ){
                temp.push(result.pop());
            }
            result.push(topStackEle);
            while(!temp.isEmpty()){
                result.push(temp.pop());
            }
        }
        while(!result.isEmpty()){
            System.out.print(result.pop()+" ");
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Design A Stack with Increment Operation:

class CustomStack {
    int maxSize;
    int[] arr;
    int top;

    public CustomStack(int maxSize) {
        top = -1;
        arr = new int[maxSize];
        this.maxSize = maxSize;
        
    }
    
    public void push(int x) {
        if(top < maxSize-1){
            arr[++top] = x;
        }
        
    }
    
    public int pop() {
        if(top == -1){
            return -1;
        }
        return arr[top--];    
    }
    
    public void increment(int k, int val) {
        int limit = (int)Math.min(k,arr.length);
        for(int i = 0; i < limit; i++){
            arr[i] += val;
        }
        
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 9. Min Stack:

class MinStack {
    class Node{
        int val;
        int min;
        Node next;
        Node(int val,int min,Node next){
            this.val = val;
            this.min = min;
            this.next = next;
        }
    }
    Node head;
    public MinStack() {
    }

    public void push(int val) {
        if(head == null){
            head = new Node(val,val,null);
        }
        else{
            Node newnode = new Node(val,Math.min(val,head.min),head);
            head = newnode;
        }
      
    }
    
    public void pop() {
        head = head.next;
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
        return head.min;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

