import java.util.*;

public class MinHeap {
    List<Integer> heap = new ArrayList<>();

    int parent(int i) {
        return (i - 1) / 2;
    }

    int left(int i) {
        return (2 * i + 1);
    }

    int right(int i) {
        return (2 * i + 2);
    }

    MinHeap() {

    }

    void insertKey(int k) {

        int i = heap.size();
        heap.add(k);
        while (i != 0 && heap.get(parent(i)) > heap.get(i)) {
            int temp = heap.get(i);
            heap.set(i, heap.get(parent(i)));
            heap.set(parent(i), temp);
            i = parent(i);
        }
    }

    void heapify(List<Integer> heap, int i) {
        while (right(i) < heap.size()) {
            int dummy = Math.min(heap.get(i), heap.get(left(i)));
            int val = Math.min(dummy, heap.get(right(i)));
            if (val == heap.get(i)) {
                return;
            } else if (val == heap.get(left(i))) {
                int temp = heap.get(i);
                heap.set(i, heap.get(left(i)));
                heap.set(left(i), temp);
                i = left(i);

            } else {
                int temp = heap.get(i);
                heap.set(i, heap.get(right(i)));
                heap.set(right(i), temp);
                i = right(i);
            }
        }
    }

    void buildHeap(List<Integer> heap) {
        for (int i = heap.size() / 2 - 1; i >= 0; i--) {
            heapify(heap, i);
        }
    }

    void deleteKey(int i) {
        int temp = heap.get(i);
        heap.set(i, heap.get(heap.size() - 1));
        heap.set(heap.size() - 1, temp);
        heap.remove(heap.size() - 1);
        buildHeap(heap);

    }

    int extractMin() {
        if (heap.size() <= 0) {
            return -1;
        }
        int temp = heap.get(0);
        heap.set(0, heap.get(heap.size() - 1));
        heap.set(heap.size() - 1, temp);
        heap.remove(heap.size() - 1);
        buildHeap(heap);
        return temp;
    }


    public static void main(String[] args) {
        MinHeap minHeap = new MinHeap();
        minHeap.insertKey(4);
        minHeap.insertKey(2);
        System.out.print(minHeap.extractMin()+" ");
        minHeap.insertKey(6);
        minHeap.deleteKey(0);
        System.out.print(minHeap.extractMin()+" ");
        System.out.print(minHeap.extractMin()+" ");

    }
}
