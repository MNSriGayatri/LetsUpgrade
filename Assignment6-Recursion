1.Nth Fibonacci Number:

public class Factorial {
    public static int Factorial(int n){
        if(n == 0 || n == 1){
            return n;
        }
        else{
            return Factorial(n-1)+Factorial(n-2);
        }
    }
    public static void main(String[] args) {
        System.out.println(Factorial(4));
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Power Of Numbers:

import java.util.*;
public class RecursivePower {
    public static int power(int a,int n) 
     {
            if(n==0)
            {
                return 1;
            }
            else if(n == 1){
                return a;
            }
            return a * power(a,n-1);
      }

      public static void main(String args[])
       {
            System.out.println(power(8,8));

       }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Reverse a String:

public class ReverseAString {
    public static String StringReverse(String str,int i){
        if(i < 0){
            return "";
        }
        else{
            return str.charAt(i) + StringReverse(str,i-1);
        }

    }
    public static void main(String[] args) {
        String str = "All is Well";
        System.out.println(StringReverse(str,str.length()-1));
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Factorial:
public class Factorial {
    public static int Factorial(int n){
        if(n == 1){
            return n;
        }
        else{
            return n * Factorial(n-1);
        }
    }
    public static void main(String[] args) {
        System.out.println(Factorial(5));
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Sum of Array:

public class SumOfArray {
    public static int ArraySum(int[] arr,int n){
        if(n < 0){
            return 0;
        }
        return arr[n] + ArraySum(arr,n-1);

    }
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,8,9,10,11};
        System.out.println(ArraySum(arr,arr.length-1));
    }

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.Largest Three Distinct Elements in an Array:

public class ThreeLargestElements {
    public static int DistinctThree(int[] arr,int i,int max,int first,int second) {
        int len = arr.length;
        if (i > len - 1 ) {
            return max;
        }
        if (arr[i] != first && arr[i] != second && arr[i] > max) {
            max = arr[i];
        }

        return DistinctThree(arr, i+1, max,first,second);

    }
    public static void main(String[] args) {
        int[] arr = {10,11,3,4,10,5,21};
        int max = Integer.MIN_VALUE;
        int first = DistinctThree(arr,0,max,0,0);
        int second = DistinctThree(arr,0,max,first,0);
        int third = DistinctThree(arr,0,max,first,second);
        System.out.println(first+","+second+","+third);

    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.Second Largest Element:

public class SecondLargest {
        public static int SecondLargestNumber(int[] arr,int i,int max,int largest) {
            int len = arr.length;
            if (i > len - 1 ) {
                return max;
            }
            if (arr[i] != largest  && arr[i] > max) {
                max = arr[i];
            }

            return SecondLargestNumber(arr, i+1, max,largest);

        }
        public static void main(String[] args) {
            int[] arr = {10,10,5,21};
            int max = Integer.MIN_VALUE;
            int largest = SecondLargestNumber(arr,0,max,0);
            int secondLargest = SecondLargestNumber(arr,0,max,largest);
            System.out.println(secondLargest);

        }


}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.Move All Zeros To End of Array:

import java.util.*;
public class MoveZerosToEnd {
    private static void moveZerosToEnd(int[] arr, int currentIndex, int prevIndex) {
        if (currentIndex == arr.length) {
            return;
        }

        if (arr[currentIndex] != 0) {
            int temp = arr[currentIndex];
            arr[currentIndex] = arr[prevIndex];
            arr[prevIndex] = temp;
            prevIndex++;
        }

        moveZerosToEnd(arr, currentIndex + 1, prevIndex);
    }
        public static void main(String[] args) {
            int[] arr = {0, 2, 0, 3, 0, 4};
            moveZerosToEnd(arr,0,0);
            System.out.println(Arrays.toString(arr));
        }

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.Left Rotation of Array:

public class LeftRotate {
    public static void RotateLeft(int[] arr,int k,int i){
        int n = arr.length;
        if(i == n){
            return;
        }
        else{
            System.out.print(arr[(i+k)%n]+" ");
        }
        RotateLeft(arr,k,i+1);
    }
    public static void main(String[] args) {
        int[] arr = {1,3,5,7,9};
        int k = 4;
        int i = 0;
        RotateLeft(arr,k,i);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. Print 1 To N:

public class OneToN {
    public static void FirstNNumbers(int n){
        if(n < 1){
            return;
        }
        FirstNNumbers(n-1);
        System.out.print(n+" ");
    }
    public static void main(String[] args) {
        FirstNNumbers(5);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. Print N To 1:

public class NToOne {
    public static void NToOneNumbers(int n){
        if(n < 1){
            return;
        }
        System.out.print(n+" ");
        NToOneNumbers(n-1);
    }
    public static void main(String[] args) {
        NToOneNumbers(10);
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12.Recursively remove all adjacent duplicates:

import java.util.*;
public class RemoveAdjacentDuplicates {
    public static void Duplicates(String str,int i){
        int len = str.length();
        StringBuilder sb = new StringBuilder();
        while(i <= len-2){
            if (str.charAt(i) == str.charAt(i + 1)) {
                i = i + 2;
            }
            else{
                sb.append(str.charAt(i));
                i = i + 1;
            }
        }
        if(i < len){
            sb.append(str.charAt(i));
        }
        String s = sb.toString();
        if(str.equals(s)){
            System.out.println(str);
        }
        else{
            Duplicates(s, 0);
        }
    }
    public static void main(String[] args) {
        Duplicates("geeksforgeek",0);
    }

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

